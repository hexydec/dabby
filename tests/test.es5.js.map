{"version":3,"sources":["test.es5.js"],"names":["QUnit","MouseEvent","params","bubbles","cancelable","mouseEvent","document","Event","window","test","h1","checkbox","html","newh1","triggered","obj","style","text","click","objNode","assert","$","view","done","success","response","url","complete","xhr","statusCode","error","data","foo","bar","dabbyReflection","type","foobar","fb","enc","output","date","encodeURIComponent","main","rmain","props","outputCC","border","padding","hooks","json","foo2","var","tabindex","name","value","checked","multi","i","opt","Array","coords","top","left","offset","parseFloat","plain","func","body","divs","count","dabbyDivs","div","e","internals","filtered","node","propsCC","borderLeftColor","borderLeftStyle","borderLeftWidth","Object","clone","empty","robj","parent","item","obj2","parents","Node","deep","value1","value2","value3","arr","items"],"mappings":"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","sourcesContent":["\"use strict\";\n\n/*! dabbyjs v0.9.5 by Will Earp - https://github.com/hexydec/dabby */\n\nQUnit.module(\"Core\");\n\n// add mouseevent support\n(function () {\n\tvar MouseEvent = function MouseEvent(eventType, params) {\n\t\tparams = params || { bubbles: false, cancelable: false };\n\t\tvar mouseEvent = document.createEvent('MouseEvent');\n\t\tmouseEvent.initMouseEvent(eventType, params.bubbles, params.cancelable, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);\n\t\treturn mouseEvent;\n\t};\n\tMouseEvent.prototype = Event.prototype;\n\twindow.MouseEvent = MouseEvent;\n})();\n\nQUnit.test(\"$.fn.init\", function (assert) {\n\tvar test = document.getElementsByClassName(\"test\")[0];\n\ttest.innerHTML = '<h1>test</h1><input type=\"checkbox\" checked=\"checked\" />';\n\tvar h1 = test.getElementsByTagName(\"h1\")[0],\n\t    checkbox = test.querySelector(\"input[type=checkbox]\"),\n\t    html = '<h1>Hello <strong>How are you?</strong></h1>',\n\t    newh1 = document.createElement(\"h1\"),\n\t    triggered = false,\n\t    obj = $(\"<h1>\", {\n\t\tstyle: \"background-color:red\",\n\t\ttext: \"test\",\n\t\tclick: function click() {\n\t\t\ttriggered = true;\n\t\t}\n\t}),\n\t    objNode = obj.get(0);\n\n\tassert.ok($(\".test\").get(0) === test, \"Can select object by class\");\n\tassert.ok($(\".test h1\").get(0) === h1, \"Can select child object\");\n\tassert.ok($(\".test > h1\").get(0) === h1, \"Can select direct child object\");\n\tassert.ok($(\".test > h1:first-child\").get(0) === h1, \"Can select first child\");\n\tassert.ok($(\"input[type=checkbox]\", test).get(0) === checkbox, \"Can select with attributes\");\n\tassert.ok($(\"input[type=checkbox]:checked\", test).get(0) === checkbox, \"Can select with attributes\");\n\n\tassert.ok($($(\".test\")).get(0) === test, \"Can select object from Dabby object\");\n\tassert.ok($(test).get(0) === test, \"Can select object from node\");\n\tassert.deepEqual($([test, h1]).get(), [test, h1], \"Can select object from node\");\n\n\tassert.ok($('<h1>').get(0) instanceof HTMLHeadingElement, \"Can create HTML objects\");\n\tassert.ok($('<h1/>').get(0) instanceof HTMLHeadingElement, \"Can create HTML objects\");\n\tassert.ok($('<h1 />').get(0) instanceof HTMLHeadingElement, \"Can create HTML objects\");\n\tassert.ok($('<h1></h1>').get(0) instanceof HTMLHeadingElement, \"Can create HTML objects\");\n\n\tassert.ok(objNode instanceof HTMLHeadingElement, \"Can create HTML objects\");\n\tassert.ok(objNode.innerText === \"test\", \"Can create HTML objects with text attributes\");\n\tassert.ok(objNode.style.backgroundColor === \"red\", \"Can create HTML objects with style attributes\");\n\n\tobjNode.dispatchEvent(new MouseEvent('click', { view: window, bubbles: true, cancelable: true }));\n\tassert.ok(triggered, \"Can create HTML objects and attached events\");\n\n\tassert.equal($(html).get(0).outerHTML, html, \"Can create HTML nodes\");\n});\n\nQUnit.module(\"Ajax\");\n\nQUnit.test(\"$.ajax\", function (assert) {\n\tassert.expect(15);\n\tvar done = assert.async(8);\n\t$.ajax(\"../tests/assets/sample.html\", { success: function success(response, status) {\n\t\t\tassert.equal(status, \"success\", \"Can make an AJAX request\");\n\t\t\tassert.ok(response.indexOf(\"Sample HTML File\") !== -1, \"AJAX request returned correct file\");\n\t\t\tdone();\n\t\t} });\n\t$.ajax({\n\t\turl: \"../tests/assets/sample.html\",\n\t\tsuccess: function success(response, status) {\n\t\t\tassert.equal(status, \"success\", \"Can make an AJAX request with all settings as object\");\n\t\t\tassert.ok(response.indexOf(\"Sample HTML File\") !== -1, \"AJAX request returned correct file\");\n\t\t\tdone();\n\t\t},\n\t\tcomplete: function complete(xhr, status) {\n\t\t\tassert.equal(status, \"success\", \"Can set complete callback\");\n\t\t\tassert.ok(xhr.responseText.indexOf(\"Sample HTML File\") !== -1, \"Complete callback returned correct file\");\n\t\t\tdone();\n\t\t},\n\t\tstatusCode: {\n\t\t\t200: function _(response, status) {\n\t\t\t\tassert.equal(status, \"success\", \"Can set statusCode 200 callback\");\n\t\t\t\tassert.ok(response.indexOf(\"Sample HTML File\") !== -1, \"Status code 200 callback returned correct file\");\n\t\t\t\tdone();\n\t\t\t}\n\t\t}\n\t});\n\t$.ajax(\"../tests/assets/sample.json\", { success: function success(response, status) {\n\t\t\tassert.equal(status, \"success\", \"Can make an AJAX request\");\n\t\t\tassert.equal(response.foo, \"foo\", \"AJAX request returned json\");\n\t\t\tdone();\n\t\t} });\n\t$.ajax(\"../tests/assets/404.html\", { error: function error(response, status) {\n\t\t\tassert.equal(status, \"error\", \"Can run callback on error\");\n\t\t\tdone();\n\t\t} });\n\n\t// syncronous\n\t$.ajax(\"../tests/assets/sample.js\", { success: function success(response, status) {\n\t\t\tassert.equal(status, \"success\", \"Can include a javascript file\");\n\t\t\tassert.ok(dabbyScriptSuccess, \"Javascript file included successfully\");\n\t\t\tdone();\n\t\t} });\n\n\t$.ajax(\"../tests/assets/sample.js?v=1.0.0\", { success: function success(response, status) {\n\t\t\tassert.equal(status, \"success\", \"Can include a javascript file\");\n\t\t\tassert.ok(dabbyScriptSuccess, \"Javascript file included successfully\");\n\t\t\tdone();\n\t\t} });\n\n\t// jsonp\n\t/*$.ajax(\"../tests/assets/jsonp.js\", {dataType: \"jsonp\", success: function (response, status) {\r\n \tassert.equal(status, \"success\", \"Can include a javascript file via JSONP\");\r\n \tassert.ok(response, \"JSONP response correct\");\r\n \tdone();\r\n }});*/\n});\n\nQUnit.module(\"Ajax\");\n\nQUnit.test(\"$.get\", function (assert) {\n\tassert.expect(8);\n\tvar done = assert.async(4);\n\n\t//basic request\n\t$.get(\"../tests/assets/sample.html\", function (response, status) {\n\t\tassert.equal(status, \"success\", \"Can make an AJAX request\");\n\t\tassert.ok(response.indexOf(\"Sample HTML File\") !== -1, \"AJAX request returned correct file\");\n\t\tdone();\n\t});\n\n\t//basic request as object\n\t$.get({ url: \"../tests/assets/sample.html\", success: function success(response, status) {\n\t\t\tassert.equal(status, \"success\", \"Can make an AJAX request\");\n\t\t\tassert.ok(response.indexOf(\"Sample HTML File\") !== -1, \"AJAX request returned correct file\");\n\t\t\tdone();\n\t\t} });\n\n\t//request with data\n\tvar data = { foo: \"foo\", bar: \"bar\" };\n\t$.get(\"../tests/assets/reflection.js\", data, function (response, status) {\n\t\tassert.equal(status, \"success\", \"Can make an AJAX request\");\n\t\tassert.ok(dabbyReflection.foo === data.foo && dabbyReflection.bar === data.bar, \"AJAX request set the posted data\");\n\t\tdone();\n\t});\n\n\t// specify data type\n\tvar data = { foo: \"foo\", bar: \"bar\", type: \"text\" };\n\t$.get(\"../tests/assets/json.txt\", function (response, status) {\n\t\tassert.equal(status, \"success\", \"Can make an AJAX request\");\n\t\tassert.deepEqual(response, data, \"AJAX response processed the data corretly\");\n\t\tdone();\n\t}, \"json\");\n});\n\nQUnit.module(\"Ajax\");\n\nQUnit.test(\"$.getScript\", function (assert) {\n\tassert.expect(2);\n\tvar done = assert.async(1);\n\n\t//basic request\n\twindow.dabbyScriptSuccess = false;\n\t$.getScript(\"../tests/assets/sample.js\", function (response, status) {\n\t\tassert.equal(status, \"success\", \"Can include a script\");\n\t\tassert.ok(window.dabbyScriptSuccess, \"Script included correctly\");\n\t\tdone();\n\t});\n});\n\nQUnit.module(\"Ajax\");\n\nQUnit.test(\"$.fn.load\", function (assert) {\n\tassert.expect(12);\n\tvar done = assert.async(2);\n\n\tvar test = document.getElementsByClassName(\"test\")[0];\n\ttest.innerHTML = '<div class=\"testtemp\"></div><div class=\"testtemp2\"></div>';\n\tvar obj = $(\".testtemp, .testtemp2\");\n\n\t// load HTML\n\tobj.load(\"../tests/assets/sample.html\", function (response, status) {\n\t\tassert.equal(status, \"success\", \"Can make an AJAX request\");\n\t\tassert.ok(response.indexOf(\"Sample HTML File\") !== -1, \"AJAX request returned correct file\");\n\t\tassert.equal($(\"p\", this).get(0).innerText, \"Sample HTML File\", \"HTML was successfully inserted into the page\");\n\t\tif (this.matches(\".testtemp2\")) {\n\t\t\t// only done() when run on both\n\t\t\tdone();\n\t\t}\n\t});\n\n\t// load HTML with selector\n\tobj.load(\"../tests/assets/sample.html .test\", function (response, status) {\n\t\tassert.equal(status, \"success\", \"Can make an AJAX request\");\n\t\tassert.ok(response.indexOf(\"Sample HTML File\") !== -1, \"AJAX request returned correct file\");\n\t\tassert.equal($(\".test\", this).get(0).innerText, \"This is inside a selector\", \"HTML was successfully inserted into the page\");\n\t\tif (this.matches(\".testtemp2\")) {\n\t\t\t// only done() when run on both\n\t\t\tdone();\n\t\t}\n\t});\n});\n\nQUnit.module(\"Ajax\");\n\nQUnit.test(\"$.param\", function (assert) {\n\tvar params = {\n\t\tfoo: \"bar\",\n\t\tbar: \"foo\",\n\t\tfoobar: {\n\t\t\tfoo: \"bar\",\n\t\t\tbar: \"foo\"\n\t\t},\n\t\tfb: [\"foo\", \"bar\", \"foobar\"],\n\t\tenc: \"this is=a&test\"\n\t},\n\t    output = \"foo=bar&bar=foo&foobar%5Bfoo%5D=bar&foobar%5Bbar%5D=foo&fb%5B%5D=foo&fb%5B%5D=bar&fb%5B%5D=foobar&enc=this%20is%3Da%26test\";\n\tassert.equal($.param(params), output, \"Can encode an array to a query string\");\n});\n\nQUnit.module(\"Ajax\");\n\nQUnit.test(\"$.serialize\", function (assert) {\n\tvar test = document.getElementsByClassName(\"test\")[0];\n\ttest.innerHTML = '<form class=\"testtemp\">' + '<input type=\"input\" name=\"input\" value=\"input\" />' + '<input type=\"number\" name=\"number\" value=\"42\" />' + '<input type=\"email\" name=\"email\" value=\"dave@angel.com\" />' + '<input type=\"datetime-local\" name=\"datetime\" value=\"1999-12-31 23:59:59\" />' + '<input type=\"submit\" name=\"submit\" value=\"\" />' + '<input type=\"checkbox\" name=\"checkbox\" value=\"unchecked\" />' + '<input type=\"checkbox\" name=\"checkbox-checked\" value=\"checked\" checked=\"checked\" />' + '<input type=\"input\" name=\"in[]\" value=\"input1\" />' + '<input type=\"input\" name=\"in[]\" value=\"input2\" />' + '<input type=\"input\" name=\"in[]\" value=\"input3\" />' + '<input type=\"radio\" name=\"radio\" value=\"radio1\" />' + '<input type=\"radio\" name=\"radio\" value=\"radio2\" checked=\"checked\" />' + '<input type=\"radio\" name=\"radio\" value=\"radio3\" />' + '<select name=\"select\">' + '<option value=\"select1\">Option 1</option>' + '<option value=\"select2\" selected=\"selected\">Option 2</option>' + '<option value=\"select3\">Option 3</option>' + '</select>' + '<select name=\"multiselect[]\" multiple=\"multiple\">' + '<option value=\"select1\">Option 1</option>' + '<option value=\"select2\" selected=\"selected\">Option 2</option>' + '<option value=\"select3\" selected=\"selected\">Option 3</option>' + '</select>' + '</form>';\n\tvar date = test.querySelector(\"input[name=datetime]\").value;\n\tassert.equal($(\".testtemp\").serialize(), \"input=input&number=42&email=dave%40angel.com&datetime=\" + encodeURIComponent(date) + \"&checkbox-checked=checked&in%5B%5D=input1&in%5B%5D=input2&in%5B%5D=input3&radio=radio2&select=select2&multiselect%5B%5D=select2&multiselect%5B%5D=select3\", \"Can serialize a form\");\n});\n\nQUnit.module(\"Attributes\");\n\nQUnit.test(\"$.fn.attr\", function (assert) {\n\tvar test = document.getElementsByClassName(\"test\")[0];\n\ttest.innerHTML = '<div class=\"testtemp\"></div>';\n\tvar main = $(\".testtemp\"),\n\t    rmain = document.getElementsByClassName(\"testtemp\")[0],\n\t    style = \"padding-top: 10px;\";\n\n\t// set and get class\n\tassert.deepEqual(main.attr(\"class\", \"testtemp testclass\"), main, \"Returns itself when setting class\");\n\tassert.equal(rmain.className, \"testtemp testclass\", \"Can set class\");\n\tassert.equal(main.attr(\"class\"), \"testtemp testclass\", \"Can retrieve class\");\n\tmain.attr(\"class\", \"testtemp\");\n\tassert.equal(main.attr(\"class\"), \"testtemp\", \"Can remove class\");\n\n\t// set and get style\n\tassert.deepEqual(main.attr(\"style\", style), main, \"Returns itself when setting style\");\n\tassert.equal(rmain.style.cssText, style, \"Can set style\");\n\tassert.equal(main.attr(\"style\"), style, \"Can retrieve style\");\n\n\t// set and get attribute\n\tassert.deepEqual(main.attr(\"itemprop\", \"articleBody\"), main, \"Returns itself when setting property\");\n\tassert.equal(rmain.getAttribute(\"itemprop\"), \"articleBody\", \"Can set property\");\n\tassert.equal(main.attr(\"itemprop\"), \"articleBody\", \"Can retrieve property\");\n\tmain.attr(\"itemprop\", null);\n\tassert.equal(main.attr(\"itemprop\"), undefined, \"Can remove property\");\n\n\t// reset\n\ttest.innerHTML = \"\";\n});\n\nQUnit.module(\"Attributes\");\n\nQUnit.test(\"$.fn.addClass\", function (assert) {\n\tvar test = document.getElementsByClassName(\"test\")[0];\n\ttest.innerHTML = '<div class=\"testtemp\"></div>';\n\tvar main = $(\".testtemp\"),\n\t    rmain = document.getElementsByClassName(\"testtemp\")[0];\n\n\t// set and get class\n\tassert.deepEqual(main.addClass(\"test1\"), main, \"Returns itself when setting class\");\n\tassert.equal(rmain.className, \"testtemp test1\", \"Can set class\");\n\tmain.addClass(\"test2 test3\");\n\tassert.equal(rmain.className, \"testtemp test1 test2 test3\", \"Can set multiple classes\");\n\trmain.className = \"testtemp\";\n\tmain.addClass([\"new1\", \"new2\"]);\n\tassert.equal(rmain.className, \"testtemp new1 new2\", \"Can set multiple classes as an array\");\n\n\t// reset\n\ttest.innerHTML = \"\";\n});\n\nQUnit.test(\"$.removeClass\", function (assert) {\n\tvar test = document.getElementsByClassName(\"test\")[0];\n\ttest.innerHTML = '<div class=\"testtemp\"></div>';\n\tvar main = $(\".testtemp\"),\n\t    rmain = document.getElementsByClassName(\"testtemp\")[0];\n\n\t// set and get class\n\trmain.className = \"testtemp test1 test2 test3\";\n\tassert.deepEqual(main.removeClass(\"test1\"), main, \"Returns itself when setting class\");\n\tassert.equal(rmain.className, \"testtemp test2 test3\", \"Can remove class\");\n\tmain.removeClass(\"test2 test3\");\n\tassert.equal(rmain.className, \"testtemp\", \"Can remove multiple classes\");\n\n\t// reset\n\ttest.innerHTML = \"\";\n});\n\nQUnit.test(\"$.toggleClass\", function (assert) {\n\tvar test = document.getElementsByClassName(\"test\")[0];\n\ttest.innerHTML = '<div class=\"testtemp\"></div>';\n\tvar main = $(\".testtemp\"),\n\t    rmain = document.getElementsByClassName(\"testtemp\")[0];\n\n\t// set and get class\n\trmain.className = \"testtemp\";\n\tassert.deepEqual(main.toggleClass(\"test1\"), main, \"Returns itself when setting class\");\n\tassert.equal(rmain.className, \"testtemp test1\", \"Can toggle class on\");\n\tmain.toggleClass(\"test1\");\n\tassert.equal(rmain.className, \"testtemp\", \"Can toggle class off\");\n\tmain.toggleClass(\"test2 test3\");\n\tassert.equal(rmain.className, \"testtemp test2 test3\", \"Can toggle multiple classes on\");\n\n\t// reset\n\ttest.innerHTML = \"\";\n});\n\nQUnit.module(\"Attributes\");\n\nQUnit.test(\"$.fn.css\", function (assert) {\n\tvar test = document.getElementsByClassName(\"test\")[0];\n\ttest.innerHTML = '<div class=\"testtemp\"></div>';\n\tvar main = $(\".testtemp\"),\n\t    rmain = document.getElementsByClassName(\"testtemp\")[0],\n\t    props = [\"border-left-color\", \"border-left-style\", \"border-left-width\"],\n\t    output = {\n\t\t\"border-left-color\": \"rgb(255, 0, 0)\",\n\t\t\"border-left-style\": \"solid\",\n\t\t\"border-left-width\": \"1px\"\n\t},\n\t    outputCC = {\n\t\t\"borderLeftColor\": \"rgb(255, 0, 0)\",\n\t\t\"borderLeftStyle\": \"solid\",\n\t\t\"borderLeftWidth\": \"1px\"\n\t};\n\n\t// retrieve CSS properties\n\trmain.style.cssText = 'border: 1px solid red;';\n\tassert.equal(main.css(\"border-left-color\"), \"rgb(255, 0, 0)\", \"Can retrieve CSS property\");\n\tassert.deepEqual(main.css(props), output, \"Can retrieve multiple CSS properties\");\n\n\tprops = [\"borderLeftColor\", \"borderLeftStyle\", \"borderLeftWidth\"];\n\tassert.deepEqual(main.css(props), outputCC, \"Can retrieve multiple CSS properties with camelCase\");\n\n\t// set css properties\n\trmain.style.cssText = '';\n\tassert.deepEqual(main.css(\"border\", \"1px solid red\"), main, \"Dabby object is returned after set\");\n\tassert.equal(rmain.style.borderLeftColor, \"red\", \"Can set CSS property\");\n\trmain.style.cssText = '';\n\tmain.css({ border: \"1px solid red\", padding: 10 }); // also tests unitless values\n\tassert.equal(rmain.style.borderLeftColor, \"red\", \"Can set CSS property through an object\");\n\tassert.equal(rmain.style.padding, \"10px\", \"Can set CSS property through an object\");\n\n\t// uses utils/setcss/setcss.js anyway, so doesn't need extensive testing here\n\n\t// reset\n\ttest.innerHTML = \"\";\n});\n\nQUnit.module(\"Attributes\", function (hooks) {\n\tvar test = document.getElementsByClassName(\"test\")[0];\n\n\thooks.before(function () {\n\t\ttest.innerHTML = '<div class=\"testtemp\"></div>';\n\t});\n\n\tQUnit.test(\"$.fn.data\", function (assert) {\n\t\tvar main = $(\".testtemp\"),\n\t\t    rmain = document.getElementsByClassName(\"testtemp\")[0],\n\t\t    json = { foo: \"bar\", foo2: \"bar2\" };\n\n\t\t// set data\n\t\tassert.deepEqual(main.data(\"var\", \"value\"), main, \"Returns itself when setting data\");\n\t\tassert.equal(main.data(\"var\"), \"value\", \"Can set data\");\n\t\tmain.data(\"json\", json);\n\t\tassert.deepEqual(main.data(\"json\"), json, \"Can set and get data as a plain object\");\n\t\tassert.deepEqual(main.data(), { var: \"value\", json: json }, \"Can retrieve all data from node\");\n\t});\n\n\thooks.after(function () {\n\t\ttest.innerHTML = \"\";\n\t});\n});\n\nQUnit.module(\"Attributes\");\n\nQUnit.test(\"$.fn.hasClass\", function (assert) {\n\tvar test = document.getElementsByClassName(\"test\")[0];\n\ttest.innerHTML = '<div class=\"testtemp testtemp2\"></div>';\n\tvar obj = $(\".testtemp\");\n\n\tassert.ok(obj.hasClass(\"testtemp2\"), \"Can detect class\");\n\tassert.ok(!obj.hasClass(\"testtemp3\"), \"Can detect class is not on object\");\n});\n\nQUnit.module(\"Attributes\");\n\nQUnit.test(\"$.fn.prop\", function (assert) {\n\tvar obj = $(\"<h1>\", { tabindex: 1 });\n\n\tassert.deepEqual(obj, obj.prop(\"title\", \"test\"), \"Returns self on set\");\n\tassert.equal(obj.get(0).title, \"test\", \"Can set property\");\n\tassert.equal(obj.prop(\"title\"), \"test\", \"Can read property\");\n\tassert.equal(obj.prop(\"tabindex\"), 1, \"Can read property\");\n\n\tvar obj = $(\"<input>\", { type: \"checkbox\", name: \"foo\", value: \"bar\", checked: \"checked\" });\n\n\tassert.equal(obj.prop(\"checked\"), true, \"Can read boolean property\");\n\tassert.equal(obj.prop(\"title\"), \"\", \"Unset property returns undefined\");\n});\n\nQUnit.module(\"Attributes\");\n\nQUnit.test(\"$.fn.val\", function (assert) {\n\tvar obj = $(\"<input>\", { type: \"text\", value: \"test\" }),\n\t    multi = document.createElement(\"select\"),\n\t    text = $(\"<textarea>\", { text: \"test\" }),\n\n\n\t// write test for this\n\ti = 0,\n\t    opt;\n\n\tassert.equal(obj.val(), \"test\", \"Can read value\");\n\tassert.deepEqual(obj.val(\"new value\"), obj, \"Returns self when setting value\");\n\tassert.equal(obj.val(), \"new value\", \"Can set value\");\n\n\tmulti.multiple = true;\n\tfor (; i < 10; i += 1) {\n\t\topt = document.createElement(\"option\");\n\t\topt.value = i;\n\t\topt.innerHTML = i;\n\t\tmulti.appendChild(opt);\n\t}\n\tobj = $(multi).val([1, 3, 5]);\n\n\tassert.deepEqual(obj.val(), [\"1\", \"3\", \"5\"], \"Can set and read multiple values\");\n\n\ttext.val(\"new value\");\n\tassert.equal(text.val(), \"new value\", \"Can set and read value from textarea\");\n});\n\nQUnit.module(\"Core\");\n\nQUnit.test(\"$.fn.each\", function (assert) {\n\tvar main = document.getElementsByClassName(\"main\")[0],\n\t    h1 = document.getElementsByClassName(\"heading\")[0],\n\t    output = [];\n\t$(\".main, .heading\").each(function () {\n\t\toutput.push(this.tagName.toLowerCase());\n\t});\n\tassert.deepEqual(output, [\"div\", \"h1\"]);\n});\n\nQUnit.module(\"Core\");\n\nQUnit.test(\"$.fn.get\", function (assert) {\n\tvar main = document.getElementsByClassName(\"main\")[0],\n\t    h1 = document.getElementsByClassName(\"heading\")[0];\n\tassert.deepEqual($(\".main, .heading\").get(), [main, h1]);\n\tassert.deepEqual($(\".main, .heading\").get(0), main);\n});\nQUnit.module(\"Core\");\n\nQUnit.test(\"$.fn.map\", function (assert) {\n\tvar test = document.getElementsByClassName(\"test\")[0];\n\ttest.innerHTML = '<div class=\"testtemp\">first</div><div class=\"testtemp\">second</div>';\n\tvar output = $(\".testtemp\").map(function () {\n\t\treturn this.innerText;\n\t});\n\tassert.deepEqual(Array.from(output), [\"first\", \"second\"]);\n});\n\nQUnit.module(\"Dimensions\");\n\nQUnit.test(\"$.fn.offset\", function (assert) {\n\tvar test = document.getElementsByClassName(\"test\")[0],\n\t    obj,\n\t    coords = { top: 100, left: 100 };\n\ttest.innerHTML = '<div class=\"testtemp\">test</div>';\n\tobj = $(\".testtemp\");\n\n\tassert.deepEqual(obj.offset(coords), obj, \"Returns self on set unpositioned element\");\n\tvar offset = obj.offset();\n\toffset.top = parseFloat(offset.top.toFixed(1)); // IE has rounding errors\n\toffset.left = parseFloat(offset.left.toFixed(1));\n\tassert.deepEqual(offset, coords, \"Can set and retrieve coordinates on unpositioned element\");\n\n\t// test position relative\n\ttest.innerHTML = '<div class=\"testtemp\" style=\"padding: 20px; position: relative;\"><div class=\"testrelative\">test</div></div>';\n\tobj = $(\".testrelative\");\n\n\tassert.deepEqual(obj.offset(coords), obj, \"Returns self on set element with a relatively positioned parent\");\n\tvar offset = obj.offset();\n\toffset.top = parseFloat(offset.top.toFixed(1)); // IE has rounding errors\n\toffset.left = parseFloat(offset.left.toFixed(1));\n\tassert.deepEqual(offset, coords, \"Can set and retrieve coordinates on element with a relatively positioned parent\");\n\n\t// test position relative\n\ttest.innerHTML = '<div class=\"testtemp\" style=\"padding: 20px; position: relative; background: red;\"><div class=\"testabsolute\" style=\"position:absolute; top: 20px; left: 20px; background: green;\">test</div></div>';\n\tobj = $(\".testabsolute\");\n\n\tassert.deepEqual(obj.offset(coords), obj, \"Returns self on set absolutely positioned element\");\n\tvar offset = obj.offset();\n\toffset.top = parseFloat(offset.top.toFixed(1)); // IE has rounding errors\n\toffset.left = parseFloat(offset.left.toFixed(1));\n\tassert.deepEqual(offset, coords, \"Can set and retrieve coordinates\");\n\n\t// reset\n\t//test.innerHTML = \"\";\n});\n\nQUnit.module(\"Dimensions\");\n\nQUnit.test(\"$.fn.offsetParent\", function (assert) {\n\tvar test = document.getElementsByClassName(\"test\")[0];\n\n\ttest.innerHTML = '<div class=\"testtemp\" style=\"position:relative;\"><div class=\"testinner\"><div class=\"testinner2\"></div></div></div>';\n\n\tassert.deepEqual($(\".testinner\").offsetParent().get(0), test.getElementsByClassName(\"testinner\")[0].offsetParent, \"Can get offset parent\");\n\tassert.deepEqual($(\".testinner2\").offsetParent().get(0), test.getElementsByClassName(\"testinner2\")[0].offsetParent, \"Can get offset parent\");\n});\n\nQUnit.module(\"Dimensions\");\n\nQUnit.test(\"$.fn.scrollLeft/$.fn.scrollTop\", function (assert) {\n\tvar test = document.getElementsByClassName(\"test\")[0];\n\n\ttest.innerHTML = '<div class=\"testtemp\" style=\"width:100px;height:100px;overflow:auto;\"><div class=\"testinner\" style=\"width:1000px;height:1000px;\"></div></div>';\n\tvar obj = $(\".testtemp\");\n\n\tassert.deepEqual(obj, obj.scrollLeft(10), \"Returns self on set\");\n\tassert.equal(obj.get(0).scrollLeft, 10, \"Can set scroll value\");\n\tassert.equal(obj.scrollLeft(), 10, \"Can get scroll value\");\n});\n\nQUnit.module(\"Dimensions\");\n\nQUnit.test(\"$.fn.width/$.fn.height\", function (assert) {\n\tvar test = document.getElementsByClassName(\"test\")[0],\n\t    obj;\n\ttest.innerHTML = '<div class=\"testtemp\" style=\"width: 100px; padding: 10px; border: 10px solid red; margin: 10px;\">test</div>';\n\tobj = $(\".testtemp\");\n\n\t// read width\n\tassert.equal(obj.width(), 100, \"Can set and read width\");\n\tassert.equal(obj.innerWidth(), 120, \"Can set and read innerWidth\");\n\tassert.equal(obj.outerWidth(), 140, \"Can set and read outerWidth\");\n\tassert.equal(obj.outerWidth(true), 160, \"Can set and read outerWidth with margin\");\n\n\t// set width\n\tassert.deepEqual(obj.width(120), obj, \"Returns self on set width\");\n\tassert.equal(obj.width(), 120, \"Can set and read width\");\n\tassert.equal(obj.innerWidth(), 140, \"Can set and read innerWidth\");\n\tassert.equal(obj.outerWidth(), 160, \"Can set and read outerWidth\");\n\tassert.equal(obj.outerWidth(true), 180, \"Can set and read outerWidth with margin\");\n\n\t// set innerWidth\n\tassert.deepEqual(obj.innerWidth(120), obj, \"Returns self on set innerWidth\");\n\tassert.equal(obj.width(), 100, \"Can set and read width\");\n\tassert.equal(obj.innerWidth(), 120, \"Can set and read innerWidth\");\n\tassert.equal(obj.outerWidth(), 140, \"Can set and read outerWidth\");\n\tassert.equal(obj.outerWidth(true), 160, \"Can set and read outerWidth with margin\");\n\n\t// set outerWidth\n\tassert.deepEqual(obj.outerWidth(120), obj, \"Returns self on set outerWidth\");\n\tassert.equal(obj.width(), 80, \"Can set and read width\");\n\tassert.equal(obj.innerWidth(), 100, \"Can set and read innerWidth\");\n\tassert.equal(obj.outerWidth(), 120, \"Can set and read outerWidth\");\n\tassert.equal(obj.outerWidth(true), 140, \"Can set and read outerWidth with margin\");\n\n\t// box-sizing\n\ttest.innerHTML = '<div class=\"testtemp\" style=\"box-sizing: content-box; width: 100px; padding: 10px; border: 10px solid red; margin: 10px;\">test</div>';\n\tobj = $(\".testtemp\");\n\n\t// read width\n\tassert.equal(obj.width(), 100, \"Can set and read width\");\n\tassert.equal(obj.innerWidth(), 120, \"Can set and read innerWidth\");\n\tassert.equal(obj.outerWidth(), 140, \"Can set and read outerWidth\");\n\tassert.equal(obj.outerWidth(true), 160, \"Can set and read outerWidth with margin\");\n\n\t// set width\n\tassert.deepEqual(obj.width(120), obj, \"Returns self on set width\");\n\tassert.equal(obj.width(), 120, \"Can set and read width\");\n\tassert.equal(obj.innerWidth(), 140, \"Can set and read innerWidth\");\n\tassert.equal(obj.outerWidth(), 160, \"Can set and read outerWidth\");\n\tassert.equal(obj.outerWidth(true), 180, \"Can set and read outerWidth with margin\");\n\n\t// set innerWidth\n\tassert.deepEqual(obj.innerWidth(120), obj, \"Returns self on set innerWidth\");\n\tassert.equal(obj.width(), 100, \"Can set and read width\");\n\tassert.equal(obj.innerWidth(), 120, \"Can set and read innerWidth\");\n\tassert.equal(obj.outerWidth(), 140, \"Can set and read outerWidth\");\n\tassert.equal(obj.outerWidth(true), 160, \"Can set and read outerWidth with margin\");\n\n\t// set outerWidth\n\tassert.deepEqual(obj.outerWidth(120), obj, \"Returns self on set outerWidth\");\n\tassert.equal(obj.width(), 80, \"Can set and read width\");\n\tassert.equal(obj.innerWidth(), 100, \"Can set and read innerWidth\");\n\tassert.equal(obj.outerWidth(), 120, \"Can set and read outerWidth\");\n\tassert.equal(obj.outerWidth(true), 140, \"Can set and read outerWidth with margin\");\n\n\t// reset\n\ttest.innerHTML = \"\";\n});\n\nQUnit.module(\"Events\", function (hooks) {\n\tvar test = document.getElementsByClassName(\"test\")[0];\n\n\thooks.before(function () {\n\t\ttest.innerHTML = '<div class=\"testtemp\"></div>';\n\t});\n\n\tQUnit.test(\"$.fn.on/$.fn.off\", function (assert) {\n\t\tvar obj = $(\".testtemp\"),\n\t\t    plain = document.getElementsByClassName(\"testtemp\")[0],\n\t\t    triggered = -1,\n\t\t    func = function func(e) {\n\t\t\ttriggered++;\n\t\t},\n\t\t    name = \"test.trigger\",\n\t\t    i = 0,\n\t\t    body = $(\"body\");\n\n\t\t// test singular events\n\t\tassert.equal(obj.on(name, func), obj, \"Returns self on set event\");\n\t\tfor (; i < 3; i++) {\n\t\t\tobj.trigger(name);\n\t\t\tassert.equal(triggered, i, \"Can set event\");\n\t\t}\n\t\t$(test).trigger(name);\n\t\tassert.equal(triggered, 2, \"Events are set on the correct object\");\n\n\t\t// test removing event\n\t\tassert.equal(obj.off(name, func), obj, \"Returns self on remove event\");\n\t\tobj.trigger(name);\n\t\tassert.equal(triggered, 2, \"Events are removed from the correct object\");\n\n\t\t// test delegated events\n\t\ttriggered = -1;\n\t\tassert.equal(body.on(name, \".testtemp\", func), body, \"Returns self on set delegated event\");\n\t\tfor (i = 0; i < 3; i++) {\n\t\t\tobj.trigger(name);\n\t\t\tassert.equal(triggered, i, \"Can set delegated event\");\n\t\t}\n\t\t$(test).trigger(name);\n\t\tassert.equal(triggered, 2, \"Events are set on the correct object\");\n\n\t\t// test removing event\n\t\tassert.equal(body.off(name, \".testtemp\", func), body, \"Returns self on remove event\");\n\t\tobj.trigger(name);\n\t\tassert.equal(triggered, 2, \"Events are removed from the correct object\");\n\t});\n\n\thooks.after(function () {\n\t\ttest.innerHTML = \"\";\n\t});\n});\n\nQUnit.module(\"Events\", function (hooks) {\n\tvar test = document.getElementsByClassName(\"test\")[0];\n\n\thooks.before(function () {\n\t\ttest.innerHTML = '<div class=\"testtemp\"><div>1</div><div>2</div><div>3</div></div>';\n\t});\n\n\tQUnit.test(\"$.fn.trigger\", function (assert) {\n\t\tvar divs = test.querySelectorAll(\".testtemp div\"),\n\t\t    count = 0,\n\t\t    dabbyDivs = $(\".testtemp div\");\n\n\t\t[].slice.call(divs).forEach(function (div) {\n\t\t\tdiv.onclick = function (e) {\n\t\t\t\tcount++;\n\t\t\t\te.stopPropagation();\n\t\t\t};\n\t\t});\n\n\t\t// test\n\t\tassert.equal(dabbyDivs.trigger(\"click\"), dabbyDivs, \"Returns self on trigger\");\n\t\tassert.equal(count, 3, \"Can trigger events\");\n\t});\n\n\thooks.after(function () {\n\t\ttest.innerHTML = \"\";\n\t});\n});\n\nQUnit.module(\"Internal\");\n\nQUnit.test(\"camelise\", function (assert) {\n\tassert.equal(internals.camelise(\"this-is-a-test\"), \"thisIsATest\", \"Can camel case a dashed sentence\");\n\tassert.equal(internals.camelise(\"this-is-a-TEST\"), \"thisIsATEST\", \"Can camel case a dashed sentence respecting case\");\n});\n\nQUnit.module(\"Internal\");\n\nQUnit.test(\"dasherise\", function (assert) {\n\tassert.equal(internals.dasherise(\"thisIsATest\"), \"this-is-a-test\", \"Can dasherise a camel-cased sentence\");\n\tassert.equal(internals.dasherise(\"thisIsATEST\"), \"this-is-a-t-e-s-t\", \"Can dasherise a camel-cased sentence respecting case\");\n});\n\nQUnit.module(\"Internal\");\n\nQUnit.test(\"filterNodes\", function (assert) {\n\tvar test = document.getElementsByClassName(\"test\")[0],\n\t    obj,\n\t    filtered;\n\ttest.innerHTML = '<div class=\"testtemp\"><div class=\"class1\"></div><div class=\"class1\"></div><div class=\"class2\"></div><div class=\"class3\"></div></div>';\n\tobj = $(\".testtemp div\");\n\tfiltered = $(\".testtemp .class1\");\n\n\tassert.deepEqual(internals.filterNodes(obj, \".class1\"), filtered.get());\n\tassert.deepEqual(internals.filterNodes(obj, filtered), filtered.get());\n\tassert.deepEqual(internals.filterNodes(obj, filtered.get()), filtered.get());\n\tassert.deepEqual(internals.filterNodes(obj, function (i, node) {\n\t\treturn node.className === \"class1\";\n\t}), filtered.get());\n\tassert.deepEqual(internals.filterNodes(obj, \".class2, .class3\", true), filtered.get());\n});\n\nQUnit.module(\"Internal\");\n\nQUnit.test(\"getVal\", function (assert) {\n\tvar obj = $(\".test\").get(0);\n\tassert.equal(internals.getVal(\"test\"), \"test\", \"Can pass-through a value\");\n\tassert.equal(internals.getVal(function (i) {\n\t\treturn this === obj && !i ? \"test\" : false;\n\t}, obj, 0), \"test\", \"When passing function as value, variables and context is correct\");\n\t//assert.equal(internals.getVal(380, obj, 0), \"380px\", \"Can return a number as a px value\");\n\tassert.equal(internals.getVal(\"380pt\", obj, 0), \"380pt\", \"Can pass through a number that already has a suffix\");\n});\n\nQUnit.module(\"Internal\");\n\nQUnit.test(\"setCss\", function (assert) {\n\tvar main = $(\".main\"),\n\t    rmain = document.getElementsByClassName(\"main\")[0],\n\t    props = { \"border-left-color\": \"red\", \"border-left-style\": \"solid\", \"border-left-width\": \"1px\" },\n\t    propsCC = { borderLeftColor: \"red\", borderLeftStyle: \"solid\", borderLeftWidth: \"1px\" },\n\t    output = {\n\t\t\"border-left-color\": \"rgb(255, 0, 0)\",\n\t\t\"border-left-style\": \"solid\",\n\t\t\"border-left-width\": \"1px\"\n\t};;\n\n\trmain.style.cssText = \"\";\n\tassert.deepEqual(internals.setCss(main, \"border-left-color\", \"red\"), main, \"Returns Dabby object when CSS is set\");\n\tassert.equal(rmain.style.borderLeftColor, \"red\", \"Can set CSS property\");\n\trmain.style.cssText = \"\";\n\tinternals.setCss(main, \"borderLeftColor\", \"red\");\n\tassert.equal(rmain.style.borderLeftColor, \"red\", \"Can set camelCase CSS property\");\n\trmain.style.cssText = \"\";\n\tinternals.setCss(main, props);\n\tassert.deepEqual(main.css(Object.keys(props)), output, \"Can set multiple CSS properties\");\n\trmain.style.cssText = \"\";\n\tinternals.setCss(main, propsCC);\n\tassert.deepEqual(main.css(Object.keys(props)), output, \"Can set multiple camelCase CSS properties\");\n\tinternals.setCss(main, \"borderLeftColor\", function (index, current) {\n\t\tassert.equal(current, \"red\", \"Callback function receives current value\");\n\t\treturn \"green\";\n\t});\n\tassert.equal(rmain.style.borderLeftColor, \"green\", \"Can set CSS property through a callback function\");\n});\n\nQUnit.module(\"Manipulation\");\n\nQUnit.test(\"$.fn.clone\", function (assert) {\n\tvar clone = $(\".test\").clone(),\n\t    main = document.getElementsByClassName(\"test\")[0];\n\n\t// set and get class\n\tassert.ok(clone.get(0).className === \"test\" && clone.get(0) !== main, \"Can clone objects\");\n});\n\nQUnit.module(\"Manipulation\");\n\nQUnit.test(\"$.fn.empty\", function (assert) {\n\tvar test = document.getElementsByClassName(\"test\")[0];\n\ttest.innerHTML = '<div class=\"testtemp\"></div>';\n\tvar main = document.getElementsByClassName(\"testtemp\")[0];\n\tmain.insertAdjacentHTML(\"beforeEnd\", \"<span>Empty</span>\");\n\tvar empty = $(\".testtemp\");\n\n\tassert.deepEqual(empty.empty(), empty, \"Returns itself on empty\");\n\tassert.equal(empty.get(0).innerHTML, \"\", \"Can empty node\");\n\n\t// reset\n\ttest.innerHTML = \"\";\n});\n\nQUnit.module(\"Manipulation\");\n\nQUnit.test(\"$.fn.html\", function (assert) {\n\tvar test = document.getElementsByClassName(\"test\")[0];\n\ttest.innerHTML = '<div class=\"testtemp\"></div>';\n\tvar main = $(\".testtemp\"),\n\t    rmain = document.getElementsByClassName(\"testtemp\")[0];\n\trmain.insertAdjacentHTML(\"beforeEnd\", \"<div>Test</div>\");\n\tvar obj = $(\".html\");\n\n\tassert.equal(main.html(), \"<div>Test</div>\", \"Can read html\");\n\tvar html = main.html(\"<div>Test</div>\");\n\tassert.equal(main.get(0).innerHTML, \"<div>Test</div>\", \"Can set html\");\n\n\t// reset\n\ttest.innerHTML = \"\";\n});\n\nQUnit.module(\"Manipulation\");\n\nQUnit.test(\"$.fn.prepend\", function (assert) {\n\tvar test = document.getElementsByClassName(\"test\")[0];\n\ttest.innerHTML = '<div class=\"testtemp\"></div>';\n\tvar main = $(\".testtemp\"),\n\t    rmain = document.getElementsByClassName(\"testtemp\")[0];\n\n\tassert.deepEqual(main.prepend(\"<div>Test</div>\"), main, \"Returns itself when insert\");\n\tassert.equal(main.html(), \"<div>Test</div>\", \"Can insert html\");\n\n\t// reset\n\ttest.innerHTML = \"\";\n});\n\nQUnit.module(\"Manipulation\");\n\nQUnit.test(\"$.fn.insertTo\", function (assert) {\n\tvar test = document.getElementsByClassName(\"test\")[0];\n\ttest.innerHTML = '<div class=\"testtemp\"></div>';\n\tvar main = $(\"<div>Test</div>\"),\n\t    rmain = document.getElementsByClassName(\"testtemp\")[0],\n\t    test;\n\n\tassert.deepEqual(main.prependTo(\".testtemp\").get(), main.get(), \"Returns itself when inserted\");\n\tassert.equal($(\".testtemp\").html(), \"<div>Test</div>\", \"Can insert html\");\n\n\t// reset\n\ttest.innerHTML = \"\";\n});\n\nQUnit.module(\"Manipulation\");\n\nQUnit.test(\"$.fn.remove\", function (assert) {\n\tvar test = document.getElementsByClassName(\"test\")[0];\n\ttest.innerHTML = '<div class=\"testtemp\"><div></div></div><div class=\"testtemp2\"></div>';\n\tvar obj = $(\".testtemp, .testtemp2\"),\n\t    robj = Array.from(document.querySelectorAll(\".testtemp, .testtemp2\"));\n\n\tassert.deepEqual(obj.remove(\".testtemp2\").get(), robj, \"Returns reduced set when removed\");\n\tassert.ok(document.getElementsByClassName(\"testtemp2\").length === 0, \"Removed item from DOM\");\n});\n\nQUnit.test(\"$.fn.detach\", function (assert) {\n\tvar test = document.getElementsByClassName(\"test\")[0];\n\ttest.innerHTML = '<div class=\"testtemp\"><div class=\"testtemp2\"></div></div>';\n\tvar obj = $(\".testtemp\");\n\n\tassert.deepEqual(obj.detach().get(0), obj.get(0), \"Returns node when it is detached\");\n\tassert.deepEqual($(\".testtemp\").get(), [], \"Node has been removed from DOM\");\n});\n\nQUnit.module(\"Manipulation\", function (hooks) {\n\tvar test = document.getElementsByClassName(\"test\")[0];\n\n\thooks.before(function () {\n\t\ttest.innerHTML = '<div class=\"testtemp\"><div></div><div></div><div></div></div>';\n\t});\n\n\tQUnit.test(\"$.fn.replaceWith\", function (assert) {\n\t\t$(\".testtemp div\").replaceWith(\"<h2>\");\n\t\tassert.equal($(\".testtemp h2\").length, 3, \"Can replace nodes\");\n\t});\n\n\tQUnit.test(\"$.fn.replaceAll\", function (assert) {\n\t\t$(\"<div>\").replaceAll(\".testtemp h2\");\n\t\tassert.equal($(\".testtemp div\").length, 3, \"Can replace nodes\");\n\t});\n\n\thooks.after(function () {\n\t\ttest.innerHTML = \"\";\n\t});\n});\n\nQUnit.module(\"Manipulation\");\n\nQUnit.test(\"$.fn.slice\", function (assert) {\n\tvar test = document.getElementsByClassName(\"test\")[0];\n\ttest.innerHTML = '<div class=\"testtemp\"></div><div class=\"testtemp2\"></div><div class=\"testtemp3\"></div>';\n\tvar main = $(\".test > div\");\n\n\tassert.deepEqual(main.slice(0, 1).get(), [document.getElementsByClassName(\"testtemp\")[0]], \"Can slice nodes\");\n\tassert.deepEqual(main.slice(1, 3).get(), $(\".testtemp2, .testtemp3\").get(), \"Can slice nodes\");\n});\n\nQUnit.module(\"Manipulation\");\n\nQUnit.test(\"$.fn.text\", function (assert) {\n\tvar test = document.getElementsByClassName(\"test\")[0];\n\ttest.innerHTML = '<div class=\"testtemp\">This <strong>is</strong> a <span><span><span>test yo</span></span></span></div>';\n\tvar obj = $(\".testtemp\");\n\n\tassert.equal(obj.text(), \"This is a test yo\", \"Can retrieve text\");\n\tassert.deepEqual(obj.text(\"This is a test yo\"), obj, \"Returns self on set text\");\n\tassert.equal(obj.get(0).textContent, \"This is a test yo\", \"Can set text\");\n});\n\nQUnit.module(\"Manipulation\");\n\nQUnit.test(\"$.fn.unwrap\", function (assert) {\n\tvar test = document.getElementsByClassName(\"test\")[0];\n\ttest.innerHTML = '<div class=\"testtemp\"><div class=\"testtemp2\">test 2</div><div class=\"testtemp3\">test 3</div></div>';\n\tvar obj = $(\".testtemp2\"),\n\t    parent = $(\".testtemp\");\n\n\tassert.deepEqual(obj.unwrap().get(), obj.get(), \"Returns self on unwrap\");\n\tassert.deepEqual($(\".test > div\").get(), $(\".testtemp2, .testtemp3\").get(), \"Can unwrap node\");\n});\n\nQUnit.module(\"Manipulation\");\n\nQUnit.test(\"$.fn.wrap\", function (assert) {\n\tvar test = document.getElementsByClassName(\"test\")[0],\n\t    html = '<div class=\"testtemp\"><p>Line 1</p><p>Line 2</p><p>Line 3</p></div>';\n\n\ttest.innerHTML = html;\n\tvar obj = $(\".testtemp p\");\n\n\tassert.deepEqual(obj.wrap(\"<div>\"), obj, \"Returns self on wrap with html\");\n\tassert.equal($(\".testtemp > div > p\").length, 3, \"Can wrap elements with html\");\n\n\ttest.innerHTML = html;\n\tobj = $(\".testtemp p\");\n\tassert.deepEqual(obj.wrap(\"<div><span></span</div>\"), obj, \"Returns self on wrap with deep html\");\n\tassert.equal($(\".testtemp > div > span > p\").length, 3, \"Can wrap elements with deep html\");\n\n\ttest.innerHTML = html + '<div class=\"testtemp2\"></div>';\n\tobj = $(\".testtemp p\");\n\tassert.deepEqual(obj.wrap(\".testtemp2\"), obj, \"Returns self on wrap with existing element\");\n\tassert.equal($(\".testtemp > .testtemp2 > p\").length, 3, \"Can wrap elements with existing element\");\n\n\t// reset\n\ttest.innerHTML = \"\";\n});\n\nQUnit.module(\"Manipulation\");\n\nQUnit.test(\"$.fn.wrapAll\", function (assert) {\n\tvar test = document.getElementsByClassName(\"test\")[0],\n\t    html = '<div class=\"testtemp\"><p>Line 1</p><p>Line 2</p><p>Line 3</p></div>';\n\n\ttest.innerHTML = html;\n\tvar obj = $(\".testtemp p\");\n\n\tassert.deepEqual(obj.wrap(\"<div>\"), obj, \"Returns self on wrap with html\");\n\tassert.equal($(\".testtemp > div > p\").length, 3, \"Can wrap elements with html\");\n\n\ttest.innerHTML = html;\n\tobj = $(\".testtemp p\");\n\tassert.deepEqual(obj.wrap(\"<div><span></span</div>\"), obj, \"Returns self on wrap with deep html\");\n\tassert.equal($(\".testtemp > div > span > p\").length, 3, \"Can wrap elements with deep html\");\n\n\ttest.innerHTML = html + '<div class=\"testtemp2\"></div>';\n\tobj = $(\".testtemp p\");\n\tassert.deepEqual(obj.wrap(\".testtemp2\"), obj, \"Returns self on wrap with existing element\");\n\tassert.equal($(\".testtemp > .testtemp2 > p\").length, 3, \"Can wrap elements with existing element\");\n\n\t// reset\n\ttest.innerHTML = \"\";\n});\n\nQUnit.module(\"Traversal\");\n\nQUnit.test(\"$.fn.add\", function (assert) {\n\tvar test = document.getElementsByClassName(\"test\")[0],\n\t    obj;\n\ttest.innerHTML = '<div class=\"testtemp\">test</div><div class=\"testtemp2\">test 2</div>';\n\tobj = $(\".testtemp\");\n\tassert.deepEqual(obj.add(\".testtemp2\").get(), $(\".testtemp, .testtemp2\").get(), \"Can add nodes\");\n\n\ttest.innerHTML = \"\";\n});\n\nQUnit.module(\"Traversal\");\n\nQUnit.test(\"$.fn.children\", function (assert) {\n\tvar test = document.getElementsByClassName(\"test\")[0],\n\t    obj;\n\ttest.innerHTML = '<div class=\"testtemp\">test</div><div class=\"testtemp2\">test 2</div>';\n\tobj = $(\".test\");\n\n\tassert.deepEqual(obj.children().get(), $(\".testtemp, .testtemp2\").get(), \"Can get child nodes\");\n\tassert.deepEqual(obj.children(\".testtemp\").get(), $(\".testtemp\").get(), \"Can get and filter child nodes\");\n\n\ttest.innerHTML = \"\";\n});\n\nQUnit.module(\"Traversal\");\n\nQUnit.test(\"$.fn.eq\", function (assert) {\n\tvar test = document.getElementsByClassName(\"test\")[0],\n\t    obj;\n\ttest.innerHTML = '<div class=\"testtemp\">test</div><div class=\"testtemp\">test 2</div><div class=\"testtemp\">test 3</div>';\n\tobj = $(\".testtemp\");\n\n\tassert.equal(obj.eq(0).get().length, 1, \"Returns only a single node\");\n\tassert.equal(obj.eq(0).get(0).innerHTML, \"test\", \"Can select index\");\n\tassert.equal(obj.eq(1).get(0).innerHTML, \"test 2\", \"Can select index\");\n\tassert.equal(obj.eq(2).get(0).innerHTML, \"test 3\", \"Can select index\");\n\tassert.equal(obj.eq(-1).get(0).innerHTML, \"test 3\", \"Can select negative index\");\n\tassert.equal(obj.eq(-2).get(0).innerHTML, \"test 2\", \"Can select negative index\");\n\tassert.equal(obj.eq(-3).get(0).innerHTML, \"test\", \"Can select negative index\");\n\tassert.deepEqual(obj.eq(4).get(), $().get(), \"Returns empty object when selected out of range\");\n\tassert.deepEqual(obj.eq(-4).get(), $().get(), \"Returns empty object when selected out of range\");\n\n\ttest.innerHTML = \"\";\n});\n\nQUnit.module(\"Traversal\");\n\nQUnit.test(\"$.fn.filter/$.fn.not\", function (assert) {\n\tvar test = document.getElementsByClassName(\"test\")[0],\n\t    obj;\n\ttest.innerHTML = '<div class=\"testtemp testtemp1\">test</div><div class=\"testtemp testtemp2\">test 2</div><div class=\"testtemp testtemp3\">test 3</div>';\n\tobj = $(\".testtemp\");\n\n\tassert.deepEqual(obj.filter(\".testtemp2\").get(), $(\".testtemp2\").get(), \"Can filter nodes by selector\");\n\tassert.equal(obj.filter(function (i, item) {\n\t\treturn item.innerHTML == \"test\";\n\t}).get(0).innerHTML, \"test\", \"Can filter nodes by callback\");\n\tassert.equal(obj.filter(function (i, item) {\n\t\treturn item.innerHTML != \"test\";\n\t}).get().length, 2, \"Can filter nodes by callback\");\n\n\tassert.deepEqual(obj.not(\".testtemp2\").get(), $(\".testtemp1,.testtemp3\").get(), \"Can negatively filter nodes by selector\");\n\tassert.equal(obj.not(function (i, item) {\n\t\treturn item.innerHTML != \"test\";\n\t}).get(0).innerHTML, \"test\", \"Can negatively filter nodes by callback\");\n\tassert.equal(obj.not(function (i, item) {\n\t\treturn item.innerHTML == \"test\";\n\t}).get().length, 2, \"Can negatively filter nodes by callback\");\n\n\ttest.innerHTML = \"\";\n});\n\nQUnit.module(\"Traversal\");\n\nQUnit.test(\"$.fn.find\", function (assert) {\n\tvar test = document.getElementsByClassName(\"test\")[0],\n\t    obj;\n\ttest.innerHTML = '<div class=\"testtemp\"><div class=\"class1\"></div><div class=\"class1\"></div><div class=\"class2\"><div class=\"findme\"></div></div><div class=\"class3\"><div class=\"findme\"></div></div></div>';\n\tobj = $(\".testtemp\");\n\n\tassert.deepEqual(obj.find(\".findme\").get(), $(\".testtemp .findme\").get());\n\tassert.deepEqual(obj.find(obj.get(0).getElementsByClassName(\"class1\")).get(), $(\".testtemp .class1\").get());\n});\n\nQUnit.module(\"Traversal\");\n\nQUnit.test(\"$.fn.first\", function (assert) {\n\tvar test = document.getElementsByClassName(\"test\")[0],\n\t    obj;\n\ttest.innerHTML = '<div class=\"testtemp\"><div class=\"class1\"></div><div class=\"class1\"></div><div class=\"class2\"><div class=\"findme\"></div></div><div class=\"class3\"><div class=\"findme\"></div></div></div>';\n\tobj = $(\".testtemp div\");\n\n\tassert.deepEqual($(\".testtemp div\").first().get(), [$(\".testtemp\").get(0).getElementsByClassName(\"class1\")[0]]);\n\tassert.deepEqual($(\".testtemp .findme\").first().get(), [$(\".testtemp\").get(0).getElementsByClassName(\"findme\")[0]]);\n});\n\nQUnit.module(\"Traversal\");\n\nQUnit.test(\"$.fn.has\", function (assert) {\n\tvar test = document.getElementsByClassName(\"test\")[0],\n\t    obj;\n\ttest.innerHTML = '<div class=\"testtemp\"><div class=\"testtemp2\">test</div></div>';\n\tobj = $(\".test\");\n\n\tassert.deepEqual(obj.has(\".testtemp\").get(0), obj.get(0), \"Can filter nodes based on children\");\n\tassert.deepEqual(obj.has(\".testtemp2\").get(0), obj.get(0), \"Can filter nodes based on children\");\n\tassert.deepEqual(obj.has(\".testtemp3\").get(), $().get(), \"Can filter nodes based on children\");\n\n\ttest.innerHTML = \"\";\n});\n\nQUnit.module(\"Traversal\");\n\nQUnit.test(\"$.fn.index\", function (assert) {\n\tvar test = document.getElementsByClassName(\"test\")[0],\n\t    obj,\n\t    obj2;\n\ttest.innerHTML = '<div class=\"testtemp\"></div><div class=\"testtemp2\"></div><div class=\"testtemp3\"></div>';\n\tobj = $(\".test div\"), obj2 = $(\".test .testtemp2, .test .testtemp3\");\n\n\tassert.equal(obj2.index(), 1, \"Can find element index amongst its siblings\");\n\tassert.equal($(\".test .testtemp3\").index(), 2, \"Can find element index amongst its siblings\");\n\n\tassert.equal($(\".testtemp\").index(\".test div\"), 0, \"Can find element index in a set from a string selector\");\n\tassert.equal($(\".testtemp2\").index(\".test div\"), 1, \"Can find element index in a set from a string selector\");\n\tassert.equal($(\".testtemp3\").index(\".test div\"), 2, \"Can find element index in a set from a string selector\");\n\n\tassert.equal(obj.index($(\".testtemp\").get(0)), 0, \"Can find element index in a set from a element selector\");\n\tassert.equal(obj.index($(\".testtemp2\").get(0)), 1, \"Can find element index in a set from a element selector\");\n\tassert.equal(obj.index($(\".testtemp3\").get(0)), 2, \"Can find element index in a set from a element selector\");\n\n\tassert.equal(obj.index($(\".testtemp\")), 0, \"Can find element index in a set from a collecction\");\n\tassert.equal(obj.index($(\".testtemp2\")), 1, \"Can find element index in a set from a collecction\");\n\tassert.equal(obj.index($(\".testtemp3\")), 2, \"Can find element index in a set from a collecction\");\n\n\t/*assert.equal($(\".testtemp\").index(obj), 0, \"Can find element index in a set\");\r\n assert.equal($(\".testtemp2\").index(obj), 1, \"Can find element index in a set\");\r\n assert.equal(obj.index(\".testtemp3\"), 2, \"Can find element index in a set\");\r\n assert.equal(obj2.index(\".testtemp3\"), 1, \"Can find element index in a set\");*/\n\n\ttest.innerHTML = \"\";\n});\n\nQUnit.module(\"Traversal\");\n\nQUnit.test(\"$.fn.is\", function (assert) {\n\tvar test = document.getElementsByClassName(\"test\")[0],\n\t    obj;\n\ttest.innerHTML = '<div class=\"testtemp\">test</div><div class=\"testtemp2\">test 2</div>';\n\tobj = $(\".testtemp, .testtemp2\");\n\n\tassert.ok(obj.is(\".testtemp\"), \"Returns true when node matches selector\");\n\tassert.ok(obj.is(document.getElementsByClassName(\"testtemp\")[0]), \"Returns true when node matches element\");\n\tassert.ok(obj.is($(\".testtemp\")), \"Returns true when node matches dabby collection\");\n\n\ttest.innerHTML = \"\";\n});\n\nQUnit.module(\"Traversal\");\n\nQUnit.test(\"$.fn.last\", function (assert) {\n\tvar test = document.getElementsByClassName(\"test\")[0],\n\t    obj;\n\ttest.innerHTML = '<div class=\"testtemp\"><div class=\"class1\"></div><div class=\"class1\"></div><div class=\"class2\"><div class=\"findme\"></div></div><div class=\"class3\"><div class=\"findme\"></div></div></div>';\n\tobj = $(\".testtemp div\");\n\n\tassert.deepEqual($(\".testtemp div\").last().get(), [$(\".testtemp\").get(0).getElementsByClassName(\"findme\")[1]]);\n\tassert.deepEqual($(\".testtemp .class1\").last().get(), [$(\".testtemp\").get(0).getElementsByClassName(\"class1\")[1]]);\n});\n\nQUnit.module(\"Traversal\");\n\nQUnit.test(\"$.fn.next/$.fn.prev\", function (assert) {\n\tvar test = document.getElementsByClassName(\"test\")[0],\n\t    obj;\n\ttest.innerHTML = '<div class=\"testtemp\">test</div><div class=\"testtemp2\">test 2</div>';\n\tobj = $(\".testtemp\");\n\n\tassert.deepEqual(obj.next().get(0), $(\".testtemp2\").get(0), \"Returns true when node matches selector\");\n\tassert.ok(obj.is(document.getElementsByClassName(\"testtemp\")[0]), \"Returns true when node matches element\");\n\tassert.ok(obj.is($(\".testtemp\")), \"Returns true when node matches dabby collection\");\n\n\ttest.innerHTML = \"\";\n});\n\nQUnit.module(\"Traversal\");\n\nQUnit.test(\"$.fn.parent/$.fn.parents\", function (assert) {\n\tvar test = document.getElementsByClassName(\"test\")[0];\n\ttest.innerHTML = '<div class=\"testtemp\"><div class=\"testtemp2\"><div class=\"testtemp3\">test</div></div></div>';\n\tvar obj = $(\".testtemp3\"),\n\t    parents = [],\n\t    parent = obj.get(0);\n\n\tassert.deepEqual(obj.parent().get(), $(\".testtemp2\").get(), \"Can select parent\");\n\tassert.deepEqual(obj.parent(\".testtemp2\").get(), $(\".testtemp2\").get(), \"Can select parent with selector\");\n\tassert.deepEqual(obj.parent(\".testtemp\").get(), [], \"Doesn't select parent when selector doesn't match\");\n\n\twhile (parent.parentNode && parent.parentNode.nodeType === Node.ELEMENT_NODE) {\n\t\tparents.push(parent.parentNode);\n\t\tparent = parent.parentNode;\n\t}\n\tassert.deepEqual(obj.parents().get(), parents, \"Can select parents\");\n});\n\nQUnit.module(\"Traversal\");\n\nQUnit.test(\"$.fn.siblings\", function (assert) {\n\tvar test = document.getElementsByClassName(\"test\")[0],\n\t    obj;\n\ttest.innerHTML = '<div class=\"testtemp\"></div><div class=\"testtemp2\"></div><div class=\"testtemp3\"></div>';\n\tobj = $(\".testtemp2\");\n\n\tassert.deepEqual(obj.siblings().get(), $(\".testtemp, .testtemp3\").get(), \"Can get an elements siblings\");\n\tassert.deepEqual(obj.siblings(\".testtemp3\").get(), $(\".testtemp3\").get(), \"Can get an elements siblings filtered by a selector\");\n\tif (typeof Dabby !== \"undefined\") {\n\t\t// jquery doesn't support refining by object\n\t\tassert.deepEqual(obj.siblings($(\".testtemp3\")).get(), $(\".testtemp3\").get(), \"Can get an elements siblings filtered by a dabby object\");\n\t\tassert.deepEqual(obj.siblings($(\".testtemp3\").get()).get(), $(\".testtemp3\").get(), \"Can get an elements siblings filtered by a node collection\");\n\t}\n\ttest.innerHTML = \"\";\n});\n\nQUnit.module(\"Utils\");\n\nQUnit.test(\"$.fn.each\", function (assert) {\n\tvar main = document.getElementsByClassName(\"main\")[0],\n\t    h1 = document.getElementsByClassName(\"heading\")[0],\n\t    output = [];\n\t$(\".main, .heading\").each(function () {\n\t\toutput.push(this.tagName.toLowerCase());\n\t});\n\tassert.deepEqual(output, [\"div\", \"h1\"]);\n});\n\nQUnit.module(\"Utils\");\n\nQUnit.test(\"$.extend\", function (assert) {\n\tassert.deepEqual($.extend({ foo: \"foo\" }, { bar: \"bar\" }), { foo: \"foo\", bar: \"bar\" }, \"$.extend simple\");\n\tassert.deepEqual($.extend({ foo: \"foo\", bar: \"foo\" }, { bar: \"bar\" }), { foo: \"foo\", bar: \"bar\" }, \"$.extend overwrite\");\n\tassert.deepEqual($.extend(true, { deep: { foo: \"foo\", bar: \"foo\" } }, { deep: { bar: \"bar\" } }), { deep: { foo: \"foo\", bar: \"bar\" } }, \"$.extend overwrite\");\n\tassert.deepEqual($.extend(true, {\n\t\tfoo: \"foo\",\n\t\tbar: \"foo\",\n\t\tdeep: {\n\t\t\tvalue1: false,\n\t\t\tvalue2: \"no\",\n\t\t\tvalue3: {\n\t\t\t\tvalue: \"foo\"\n\t\t\t},\n\t\t\tarr: [1, 2]\n\t\t}\n\t}, {\n\t\tbar: {\n\t\t\tvalue: \"bar\"\n\t\t},\n\t\tdeep: {\n\t\t\tvalue1: true,\n\t\t\tvalue2: \"yes\",\n\t\t\tvalue3: {\n\t\t\t\tvalue: \"bar\",\n\t\t\t\tvalue2: \"foo\"\n\t\t\t},\n\t\t\tarr: [3, 4]\n\t\t}\n\t}), {\n\t\tfoo: \"foo\",\n\t\tbar: {\n\t\t\tvalue: \"bar\"\n\t\t},\n\t\tdeep: {\n\t\t\tvalue1: true,\n\t\t\tvalue2: \"yes\",\n\t\t\tvalue3: {\n\t\t\t\tvalue: \"bar\",\n\t\t\t\tvalue2: \"foo\"\n\t\t\t},\n\t\t\tarr: [3, 4]\n\t\t}\n\t}, \"$.extend deep merge\");\n});\n\nQUnit.module(\"Utils\");\n\nQUnit.test(\"$.isArray\", function (assert) {\n\tvar arr = [],\n\t    obj = {};\n\tassert.ok($.isArray(arr), \"Returns true when array\");\n\tarr.push(\"test\");\n\tassert.ok($.isArray(arr), \"Returns true when array\");\n\tassert.ok(!$.isArray(obj), \"Returns false when not array\");\n\tobj.test = \"test\";\n\tassert.ok(!$.isArray(obj), \"Returns false when not array\");\n});\n\nQUnit.module(\"Utils\");\n\nQUnit.test(\"$.isFunction\", function (assert) {\n\t[function () {}, $.isFunction, window, document, document.getElementsByClassName(\"test\")[0], \"hi\", 5, 3.14, {}].forEach(function (func, i) {\n\t\tassert.equal($.isFunction(func), i < 2, \"Input is\" + (i < 2 ? \"\" : \" not\") + \" function\");\n\t});\n});\n\nQUnit.module(\"Utilities\", function (hooks) {\n\n\tQUnit.test(\"$.isPlainObject\", function (assert) {\n\n\t\tassert.equal($.isPlainObject(document.createElement('div')), false, \"Host object is not plain\");\n\t\tassert.equal($.isPlainObject(null), false, \"NULL is not plain\");\n\t\tassert.equal($.isPlainObject(function () {\n\t\t\tfunction Foo() {};return new Foo();\n\t\t}()), false, \"Instance of other object is not plain\");\n\t\tassert.equal($.isPlainObject(5), false, \"Number primitive is not plain\");\n\t\tassert.equal($.isPlainObject(\"dabby\"), false, \"String primitive is not plain\");\n\t\tassert.equal($.isPlainObject(new Number(6)), false, \"Number object is not plain\");\n\t\tassert.equal($.isPlainObject({}), true, \"Empty object is plain\");\n\t\tassert.equal($.isPlainObject(new Object()), true, \"New Object is plain\");\n\t\tassert.equal($.isPlainObject(Object.create(null)), true, \"Object created from null is plain\");\n\t});\n});\n\nQUnit.module(\"Utils\");\n\nQUnit.test(\"$.isWindow\", function (assert) {\n\tvar items = [window, document, document.getElementsByClassName(\"test\")[0]];\n\titems.forEach(function (key, value) {\n\t\tassert.equal($.isWindow(value), value === window, \"Can detect\" + (value === window ? \"\" : \" not\") + \" window\");\n\t});\n});\n\nQUnit.module(\"Utils\");\n\nQUnit.test(\"$.map\", function (assert) {\n\tvar arr = [\"foo\", \"bar\"],\n\t    output = [],\n\t    obj = { foo: \"foo\", bar: \"bar\" };\n\toutput = $.map(arr, function (item) {\n\t\treturn item;\n\t});\n\tassert.deepEqual(arr, output, \"$.map array\");\n\n\toutput = $.map(obj, function (item, index) {\n\t\treturn item;\n\t});\n\tassert.deepEqual(arr, output, \"$.map object\");\n});\n\n//# sourceMappingURL=test.es5.js.map\n//# sourceMappingURL=test.es5.js.map\n//# sourceMappingURL=test.es5.js.map\n//# sourceMappingURL=test.es5.js.map\n//# sourceMappingURL=test.es5.js.map\n//# sourceMappingURL=test.es5.js.map\n//# sourceMappingURL=test.es5.js.map\n//# sourceMappingURL=test.es5.js.map\n//# sourceMappingURL=test.es5.js.map\n//# sourceMappingURL=test.es5.js.map\n//# sourceMappingURL=test.es5.js.map\n"],"file":"test.es5.js"}